server:
  port: 9001
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5

spring:
  application:
    # 설정 서버에서 설정을 필터링하는데 사용하는 애플리케이션의 이름
    name: catalog-service
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/polardb_catalog
    hikari:
      # 풀에서 연결 객체를 얻기 위해 기다려야 하는 최대 시간 (밀리초)
      connection-timeout: 2000
      # HikariCP가 풀에 최대한으로 유지할 수 있는 연결 객체의 수
      maximum-pool-size: 5
  config:
    # 가능하면 컨피그 서버에서 설정 데이터를 가져온다.
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      # 설정 서버에 연결될 때까지 기다리는 시간(밀리초) 클라이언트 애플리케이션 서버 -> 컨피그 서버
      request-connect-timeout: 5000
      # 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초) 컨피그 서버 -> 백엔드 원격 레포
      request-read-timeout: 5000
      # 컨피그 서버 연결 실패를 치명적 오류로 인식 -> true인 경우에만 재시도
      fail-fast: false
      retry:
        # 시도의 최대 횟수
        max-attempts: 6
        # 최초 재시도 지연 시간 (밀리초)
        initial-interval: 1000
        # 재시도 지연 최대 시간 (밀리초)
        max-interval: 2000
        # 재시도 시간 계산 승수
        multiplier: 1.1
polar:
  greeting: Welcome to the local book catalog!

management:
  endpoints:
    web:
      exposure:
        # HTTP를 통해 /actuator/refresh 엔드포인트를 노출한다.
        include: refresh
